#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tictactoe-online:server');
var http = require('http');
const {
  send
} = require('process');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Setup Socket env
 */

var io = require('socket.io')(server, {
  cors: {
    origin: "*"
  }
});

io.on('connection', (socket) => {
  socket.on('disconnect', () => {
    console.log('user disconnected');
  });

  var room = ['room1', 'room2'];
  socket.on('joinRoom', joinRoom);
  socket.on('leaveRoom', leaveRoom);
  socket.on('sendMsg', sendMsg);
  socket.on('startGame', startGame);
  socket.on('clickBlock', clickBlock);

  async function joinRoom(num, name) {
    await socket.join(room[num]);
    var clients = io.sockets.adapter.rooms.get(room[num]);
    var numClients = clients.size;
    io.to(room[num]).emit('joinRoom', num, name);
    if (numClients === 1) {
      io.to(room[num]).emit('notFullRoom');
    } else if (numClients === 2) {
      io.to(room[num]).emit('fullRoom');
    }
  };
  async function leaveRoom(num, name) {
    await socket.leave(room[num]);
    io.to(room[num]).emit('leaveRoom', num, name);
    io.to(room[num]).emit('notFullRoom');
  };
  function sendMsg(num, name, msg) {
    io.to(room[num]).emit('sendMsg', name, msg);
  };
  function startGame(num) {
    io.to(room[num]).emit('startGame');
    //자신의 턴을 'O'로 상대의 턴을 'X'로 바꿈
    //-> 게임을 시작한 사람이 'O'로 시작하게 됨
    socket.broadcast.to(room[num]).emit('initTurnX');
    socket.emit('initTurnO');
  };
  function clickBlock(num, nRow, nCol, turn) {
    io.to(room[num]).emit('clickBlock', nRow, nCol, turn);
  };
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}